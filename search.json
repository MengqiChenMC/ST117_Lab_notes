[
  {
    "objectID": "lab_1_markdown.html",
    "href": "lab_1_markdown.html",
    "title": "ST117 Lab 1",
    "section": "",
    "text": "Welcome to ST117 Introduction to Statistical Modelling Lab 1!\nIn this lab session, we will focus on how to collect, save, and read data in R. We will also discuss some ways to manipulate and visualise our datasets. You will also have the chance to share and present the data you have collected with your deskmates!\n\n\n\n\n\n\nAbout me\n\nEmail: mengqi.chen.2@warwick.ac.uk\nRoom: MB3.14"
  },
  {
    "objectID": "lab_1_markdown.html#saving-data-into-.csv-files",
    "href": "lab_1_markdown.html#saving-data-into-.csv-files",
    "title": "ST117 Lab 1",
    "section": "2.1 Saving data into .csv Files",
    "text": "2.1 Saving data into .csv Files\nHere’s a basic example of how to save a dataset into a .csv file in R:\n\n# Create a sample data frame\ndata &lt;- data.frame(\n  id = 1:10,\n  score = runif(10, min=0, max=100)\n)\n\n# Write the data frame to a CSV file\nwrite.csv(data, \"sample_data.csv\", row.names = FALSE)"
  },
  {
    "objectID": "lab_1_markdown.html#reading-csv-files",
    "href": "lab_1_markdown.html#reading-csv-files",
    "title": "ST117 Lab 1",
    "section": "2.2 Reading CSV Files",
    "text": "2.2 Reading CSV Files\nTo read a CSV file into R:\n\n# Read the CSV file\ndata_read &lt;- read.csv(\"sample_data.csv\", header = FALSE)"
  },
  {
    "objectID": "lab_1_markdown.html#finding-data-online",
    "href": "lab_1_markdown.html#finding-data-online",
    "title": "ST117 Lab 1",
    "section": "2.3 Finding data online",
    "text": "2.3 Finding data online\nDatasets can also be found in various online repositories, such as:\n\nKaggle is a popular platform for data science competitions, but it also hosts a wide variety of datasets. These datasets cover a range of topics and complexities and can be a great starting point for projects in statistical modelling, data science, and machine learning\nUCI Machine Learning Repository: The University of California, Irvine, maintains a repository of datasets specifically for machine learning. These datasets are well-documented and have been used in numerous academic papers, making them ideal for research.\n…\n\n\n\n\n\n\n\nYour turn!\n\n\n\n\nPlease share your A0-collect! datasets to your deskmate - you could use email, link sharing, USB, etc.\nIntroduce your datasets to each other - how have you collected the data? What questions are you trying to answer with your data?\nAfter you have received your deskmate’s datasets, try to load them into your R workspace."
  },
  {
    "objectID": "lab_1_markdown.html#meet-the-penguins",
    "href": "lab_1_markdown.html#meet-the-penguins",
    "title": "ST117 Lab 1",
    "section": "Meet the penguins",
    "text": "Meet the penguins\n\nThe penguins data from the palmerpenguins package contains size measurements for 344 penguins from three species observed on three islands in the Palmer Archipelago, Antarctica.\nWe will first install and load the packages:\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\n\nLet’s take a look at the penguins data:\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nWhat if we are interested in some specific aspects of the penguins?\n\nCalculate the mean body mass of penguins (similarly, you can use var for variance and median for median)\n\nmean(penguins$body_mass_g, na.rm = TRUE) # na.rm indicates whether we remove the NA values\n\n[1] 4201.754\n\n\nGet the 5 largest body masses\n\nhead(sort(penguins$body_mass_g, decreasing=TRUE), 5)\n\n[1] 6300 6050 6000 6000 5950\n\n\n\n\n\n\n\n\n\n*Introducing: dplyr package\n\n\n\nIn data science, dplyr is a very popular package. It is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges. To install and load dplyr:\n\n# Load the dplyr package for data manipulation\ninstall.packages(\"dplyr\")\nlibrary(dplyr)\n\n\n\nWith dplyr, we can do more fun things with our dataset!\n\nCount how many penguins are in each species\n\ncount(penguins, species)\n\n# A tibble: 3 × 2\n  species       n\n  &lt;fct&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n\n\nFilter the datasets to get the data for female Gentoos only:\n\nfilter(penguins, sex == \"female\", species == \"Gentoo\")\n\n# A tibble: 58 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Gentoo  Biscoe           46.1          13.2               211        4500\n 2 Gentoo  Biscoe           48.7          14.1               210        4450\n 3 Gentoo  Biscoe           46.5          13.5               210        4550\n 4 Gentoo  Biscoe           45.4          14.6               211        4800\n 5 Gentoo  Biscoe           43.3          13.4               209        4400\n 6 Gentoo  Biscoe           40.9          13.7               214        4650\n 7 Gentoo  Biscoe           45.5          13.7               214        4650\n 8 Gentoo  Biscoe           45.8          14.6               210        4200\n 9 Gentoo  Biscoe           42            13.5               210        4150\n10 Gentoo  Biscoe           46.2          14.5               209        4800\n# ℹ 48 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nGet the mean body mass of penguins by species\n\nsummarise(penguins, mean_body_mass = mean(body_mass_g, na.rm = TRUE),\n            .by = species)\n\n# A tibble: 3 × 2\n  species   mean_body_mass\n  &lt;fct&gt;              &lt;dbl&gt;\n1 Adelie             3701.\n2 Gentoo             5076.\n3 Chinstrap          3733.\n\n\n\n\n\n\n\n\n\nYour turn!\n\n\n\n\nUse these functions, or other ones that you like, investigate your and your deskmate’s datasets!\n\nIf you run into any problems, try solving them by checking the documentation, using the help function, and discussing with each other!\n\nShare your findings with your deskmate."
  },
  {
    "objectID": "lab_2_markdown.html",
    "href": "lab_2_markdown.html",
    "title": "ST117 Lab 2",
    "section": "",
    "text": "When we read a CSV file with read.csv, there is an argument header deciding whether it reads the first row as the column names of the variables.\nRecall that last time, we generated a random data frame of columns named “id” and “score” first.\n\ndata &lt;- data.frame(\n  id = 1:3,\n  score = sample(5:10, 3, replace = TRUE) # sample(list, n) allows you to sample number n values from list\n)\ndata\n\n  id score\n1  1     5\n2  2     8\n3  3     5\n\n\nNow, we write data into a CSV file\n\n# Write the data frame to a CSV file\nwrite.csv(data, \"sample_data.csv\", row.names = FALSE)\n\nIf we read with header=TRUE (default in this case), “id” and “score” are parsed as column names instead of variable values\n\ndata_read_header &lt;- read.csv(\"sample_data.csv\", header = TRUE)\ndata_read_header\n\n  id score\n1  1     5\n2  2     8\n3  3     5\n\n\nHowever, if we read with header=FALSE, then “id” and “score” are regarded as values\n\ndata_read_noheader &lt;- read.csv(\"sample_data.csv\", header = FALSE)\ndata_read_noheader\n\n  V1    V2\n1 id score\n2  1     5\n3  2     8\n4  3     5\n\n\nIn this case, you would run into problems if you simply take the first column of data_read:\n\ndata_read_noheader[,1]\n\n[1] \"id\" \"1\"  \"2\"  \"3\" \n\n\nYou also run into problems if you are getting a column by its name:\n\ndata_read_header$id\n\n[1] 1 2 3\n\n\n\ndata_read_noheader$id\n\nNULL\n\n\n\n\n\n\n\n\nNote\n\n\n\nheader is defaulted to TRUE if and only if the first row contains one fewer field than the number of columns. For further details, use ?read.csv to check the full documentation.\n\n\n\n\n\nThe R Console is an interactive platform for immediate execution of individual commands, ideal for exploratory data analysis and quick tests.\nIn contrast, R Scripts are non-interactive files where code can be written, saved, and executed in a structured and reproducible manner, suitable for complex and longer projects.\n\n\n\nWhen you find a useful R package that isn’t already installed on your system, you use install.packages() to download and install it. This is typically a one-time process for each package. For example, to install the ggplot2 package, you would use:\n\ninstall.packages(\"ggplot2\")\n\nEvery time you start a new R session and want to use a previously installed package, you need to load it using the library() function. This needs to be done at the beginning of your scripts to ensure that all functions from the package are available. For example:\n\nlibrary(ggplot2)\n\nThis command does not install the package again, but simply makes its functionality available in your current session.\n\n\n\nTo convert a string that represents a number into a numeric format, you can use the as.numeric() function. For example:\n\nnumbers_as_strings &lt;- c(\"1\", \"2\", \"3\")\nnumbers &lt;- as.numeric(numbers_as_strings)\n\nConversely, if you need to convert numbers to strings, perhaps for output formatting, use the as.character() function:\n\nnumbers &lt;- c(1, 2, 3)\nnumbers_as_strings &lt;- as.character(numbers)"
  },
  {
    "objectID": "lab_2_markdown.html#data-frame-header",
    "href": "lab_2_markdown.html#data-frame-header",
    "title": "ST117 Lab 2",
    "section": "",
    "text": "When we read a CSV file with read.csv, there is an argument header deciding whether it reads the first row as the column names of the variables.\nRecall that last time, we generated a random data frame of columns named “id” and “score” first.\n\ndata &lt;- data.frame(\n  id = 1:3,\n  score = sample(5:10, 3, replace = TRUE) # sample(list, n) allows you to sample number n values from list\n)\ndata\n\n  id score\n1  1     5\n2  2     8\n3  3     5\n\n\nNow, we write data into a CSV file\n\n# Write the data frame to a CSV file\nwrite.csv(data, \"sample_data.csv\", row.names = FALSE)\n\nIf we read with header=TRUE (default in this case), “id” and “score” are parsed as column names instead of variable values\n\ndata_read_header &lt;- read.csv(\"sample_data.csv\", header = TRUE)\ndata_read_header\n\n  id score\n1  1     5\n2  2     8\n3  3     5\n\n\nHowever, if we read with header=FALSE, then “id” and “score” are regarded as values\n\ndata_read_noheader &lt;- read.csv(\"sample_data.csv\", header = FALSE)\ndata_read_noheader\n\n  V1    V2\n1 id score\n2  1     5\n3  2     8\n4  3     5\n\n\nIn this case, you would run into problems if you simply take the first column of data_read:\n\ndata_read_noheader[,1]\n\n[1] \"id\" \"1\"  \"2\"  \"3\" \n\n\nYou also run into problems if you are getting a column by its name:\n\ndata_read_header$id\n\n[1] 1 2 3\n\n\n\ndata_read_noheader$id\n\nNULL\n\n\n\n\n\n\n\n\nNote\n\n\n\nheader is defaulted to TRUE if and only if the first row contains one fewer field than the number of columns. For further details, use ?read.csv to check the full documentation."
  },
  {
    "objectID": "lab_2_markdown.html#r-script-vs-console",
    "href": "lab_2_markdown.html#r-script-vs-console",
    "title": "ST117 Lab 2",
    "section": "",
    "text": "The R Console is an interactive platform for immediate execution of individual commands, ideal for exploratory data analysis and quick tests.\nIn contrast, R Scripts are non-interactive files where code can be written, saved, and executed in a structured and reproducible manner, suitable for complex and longer projects."
  },
  {
    "objectID": "lab_2_markdown.html#installing-and-loading-packages",
    "href": "lab_2_markdown.html#installing-and-loading-packages",
    "title": "ST117 Lab 2",
    "section": "",
    "text": "When you find a useful R package that isn’t already installed on your system, you use install.packages() to download and install it. This is typically a one-time process for each package. For example, to install the ggplot2 package, you would use:\n\ninstall.packages(\"ggplot2\")\n\nEvery time you start a new R session and want to use a previously installed package, you need to load it using the library() function. This needs to be done at the beginning of your scripts to ensure that all functions from the package are available. For example:\n\nlibrary(ggplot2)\n\nThis command does not install the package again, but simply makes its functionality available in your current session."
  },
  {
    "objectID": "lab_2_markdown.html#converting-between-strings-and-mumbers",
    "href": "lab_2_markdown.html#converting-between-strings-and-mumbers",
    "title": "ST117 Lab 2",
    "section": "",
    "text": "To convert a string that represents a number into a numeric format, you can use the as.numeric() function. For example:\n\nnumbers_as_strings &lt;- c(\"1\", \"2\", \"3\")\nnumbers &lt;- as.numeric(numbers_as_strings)\n\nConversely, if you need to convert numbers to strings, perhaps for output formatting, use the as.character() function:\n\nnumbers &lt;- c(1, 2, 3)\nnumbers_as_strings &lt;- as.character(numbers)"
  },
  {
    "objectID": "lab_2_markdown.html#random-numbers-and-data-frame",
    "href": "lab_2_markdown.html#random-numbers-and-data-frame",
    "title": "ST117 Lab 2",
    "section": "3.1 Random numbers and data frame",
    "text": "3.1 Random numbers and data frame\n\n3.1.1 Generating Random Numbers and Names\n(i) Generate two vectors \\((v_1,v_2)\\) of 30 random integers each, where the elements in \\(v_1\\) are uniformly drawn from \\(\\{80,81,\\dots,100\\}\\), and the elements in \\(v_2\\) are uniformly drawn from \\(\\{60,61,\\dots, 90 \\}\\), with replacement.\n(ii) Generate a vector of 30 random names using the randomNames() function. Remember to install the randomNames package and load it!\n\n\n\n\n\n\nHint\n\n\n\nset.seed() allows the code to be reproducible by setting a specific seed value. When a seed is set, the sequence generated remains deterministic.\n\n\n\n\n3.1.2 Create a data frame\nWe aim to record the names, assignment marks, and exam marks of 30 students from course 1 in a table. Using the functions above, first generate these items randomly, then combine them into a data frame with three columns: “names”, “assignment”, and “exam”.\n\n\n3.1.3 Deal with data frame\n(i) First, calculate the final marks for this course using the formula \\[\\text{Final mark} = 0.2\\times \\text{Assignment} + 0.8\\times \\text{Exam}\\] and add this information to a new column named finalMark.\n(ii) Can you find the student with the highest finalMark?\n\n\n\n\n\n\nHint\n\n\n\n\nYou may consider sorting your data frame in descending order by the values of finalMarks - look up the different between sort and order!\nAlternatively, you can use the arrange function in the dplyr package for this task (optional).\n\n\n\n(iii) Next, calculate the means of assignment, exam, and finalMarks, respectively.\n(iv) Then, randomly pick 10 students and set then to have chosen course 2. The other students have not chosen this course. Please add a column course2 to indicate their choice (0 for yes,1 for no).\n(v) Finally, find the students with marks above 85 and who haven’t chosen course 2 by extracting values from the names column. You can also use the apply() function for this purpose. Verify if these two methods give the same results."
  },
  {
    "objectID": "lab_2_markdown.html#define-a-function",
    "href": "lab_2_markdown.html#define-a-function",
    "title": "ST117 Lab 2",
    "section": "3.2 Define a function",
    "text": "3.2 Define a function\nRecall that the Fibonacci sequence is defined by recurrent relations:\n\\(F_0=0,\\ F_1=1,\\ F_n=F_{n-1}+F_{n-2}\\).\nDefine a function to produce the nth Fibonacci number with or without a loop."
  },
  {
    "objectID": "lab_2_markdown.html#uniform-distribution-and-histogram",
    "href": "lab_2_markdown.html#uniform-distribution-and-histogram",
    "title": "ST117 Lab 2",
    "section": "3.3 Uniform distribution and histogram",
    "text": "3.3 Uniform distribution and histogram\nSimulate 1000 samples from a uniform distribution \\(X\\sim U[0,1]\\) and create a histogram of the generated sequence. Overlay the histogram on the probability density function - does the histogram reflect the density well?\n\n\n\n\n\n\nHint\n\n\n\n\nYou can look up dunif(), which defines the probability density function of a uniform distribution.\nTo plot the histogram, you can simply use the hist function - alternatively, you can try the ggplot2 package.\n\n\n\n\n\n\n\n\n\nDiscussion\n\n\n\nIf we increase the number of simulations, does the fit improve?"
  },
  {
    "objectID": "lab_2_markdown.html#problem-statement",
    "href": "lab_2_markdown.html#problem-statement",
    "title": "ST117 Lab 2",
    "section": "Problem Statement",
    "text": "Problem Statement\nA and B are tossing a fair coin. A wins if HHH appears first; B wins if HTH appears first. Who is more likely to win?"
  },
  {
    "objectID": "lab_2_markdown.html#simulation-code",
    "href": "lab_2_markdown.html#simulation-code",
    "title": "ST117 Lab 2",
    "section": "Simulation Code",
    "text": "Simulation Code\nWe can write some codes to simulate the game\n\nsimulate_coin_toss &lt;- function(sequence_a, sequence_b, num_simulations = 10000) {\n  wins_a &lt;- 0\n  wins_b &lt;- 0\n\n  # play the game num_simulations times\n  for (i in 1:num_simulations) {\n    \n    # keep tossing until there is a winner\n    coin_sequence &lt;- \"\"\n    while (!grepl(sequence_a, coin_sequence) && !grepl(sequence_b, coin_sequence)) {\n      coin_sequence &lt;- paste0(coin_sequence, sample(c(\"H\", \"T\"), 1, replace = TRUE))\n    }\n    \n    # record the winner\n    if (grepl(sequence_a, coin_sequence)) {\n      wins_a &lt;- wins_a + 1\n    } else {\n      wins_b &lt;- wins_b + 1\n    }\n  }\n\n  # use the number of wins to estimate the winning probability\n  prob_a_wins &lt;- wins_a / num_simulations\n  prob_b_wins &lt;- wins_b / num_simulations\n\n  return(c(prob_a_wins, prob_b_wins))\n}\n\n# Call the function\nsimulate_coin_toss(\"HHH\", \"HTH\")\n\n[1] 0.406 0.594\n\n\n\n\n\n\n\n\nYour turn\n\n\n\n\nCan you write some codes to estimate the expected number of tosses needed until a certain player gets a win?\nCan you prove your winning probabilities algebraically?\n\n\n\n\n# Function to calculate expected number of tosses\nexpected_tosses &lt;- function(sequence, num_simulations = 10000) {\n  toss_counts &lt;- numeric(num_simulations)\n\n  for (i in 1:num_simulations) {\n    coin_sequence &lt;- \"\"\n    toss_count &lt;- 0\n\n    while (!grepl(sequence, coin_sequence)) {\n      coin_sequence &lt;- paste0(coin_sequence, sample(c(\"H\", \"T\"), 1, replace = TRUE))\n      toss_count &lt;- toss_count + 1\n    }\n\n    toss_counts[i] &lt;- toss_count\n  }\n\n  mean(toss_counts)\n}\n\n# Calculate for sequences \"HHH\" and \"HHT\"\nexpected_tosses(\"HHH\")\n\n[1] 14.0364\n\nexpected_tosses(\"HTT\")\n\n[1] 7.9293"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Welcome to the website for the ST117 Introduction to Statistics Lab sessions. This site is regularly updated with lab notes for each session. It also contains a variety of resources to assist you in learning R and statistical modelling."
  },
  {
    "objectID": "index.html#useful-resources",
    "href": "index.html#useful-resources",
    "title": "Home",
    "section": "Useful Resources",
    "text": "Useful Resources\nThe following cheatsheets can be helpful for quick references:\n\nR Cheatsheet: A comprehensive guide to the basics of R programming.\nData-Wrangling Cheatsheet: A summary of various data-wrangling commands with packages dplyr and tidyr.\nggplot2 Cheatsheet: ggplot2 is a powerful tool for making custom plots in R. This cheatsheet provides a concise guide.\ntidyverse Cheatsheet: tdyverse is a collection of R packages designed for data science. This cheatsheet covers some of the most commonly used packages.\nR Markdown Cheatsheet: This cheatsheet provides a quick reference to the R Markdown syntax.\nStatistical Distributions Cheatsheet: A sheet summarising the properties of some basic discrete and continuous distributions."
  },
  {
    "objectID": "index.html#feedback",
    "href": "index.html#feedback",
    "title": "Home",
    "section": "Feedback",
    "text": "Feedback\nPlease fill out the anonymous feedback form to help make the lab sessions better for everyone!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This website is created by Mengqi Chen at Department of Statistics, University of Warwick in term 2, 2024. It is put together with Quarto, which is an open-source scientific and technical publishing system designed to create dynamic and reproducible documents.\nFor feedback on the lab sessions please fill out the anonymous feedback form. For corrections and comments on this site, please email me."
  }
]